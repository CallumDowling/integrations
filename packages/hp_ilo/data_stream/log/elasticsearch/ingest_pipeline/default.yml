---
description: Pipeline to process HP iLO logs
processors:

  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      tag: rename

  - grok:
      field: event.original
      patterns:
      - '^%{SYSLOGTIMESTAMP:_tmp.timestamp} %{HOSTNAME:host.hostname} %{WORD:hp.ilo.version} %{GREEDYDATA:message}$'
      ignore_missing: true
      tag: grok_1

  - grok:
      field: message
      trace_match: true
      ignore_missing: true
      ignore_failure: true
      patterns:
      - '^Browser logout: %{USER:source.user.name} - %{IP:source.ip}(\((?<source.domain>.*)\)\.)?.*$'
      - '^Browser login: %{USER:source.user.name} - %{IP:source.ip}(\((?<source.domain>.*)\)\.)?.*$'
      - '^Browser login failure from: %{IP:source.ip}(\((?<source.domain>.*)\)\.)?.*$'
      - '^Remote console session stopped by: %{USER:source.user.name} - %{IP:source.ip}(\((?<source.domain>.*)\)\.)?.*$'
      - '^Remote console session started by: %{USER:source.user.name} - %{IP:source.ip}(\((?<source.domain>.*)\)\.)?.*$'
      - '^Remote Syslog modified by: %{USER:source.user.name}\..*$'
      - '^Host REST logout: %{GREEDYDATA:source.user.name}.*$'
      - '^Host REST login: %{GREEDYDATA:source.user.name}.*$'
      - '^iLO detected more than 3 unauthorized login attempts\..*$'
      - '^eRS - Data Collection Sent.*$'
      - '^eRS - Active Health Report Sent.*$'
      - '^Embedded Flash\: Restarted.*$' 
      - '^Server reset\..*$'
      - '^Server power restored\..*$'
      - '^The receipt of this message confirms that Syslog is configured correctly.*$'
      - '^.*$'

  # Set matched index from above grok processor N.B: trace_match required to get this index into metafields. 
  # This processor may be obsolete in future, see: https://github.com/elastic/elasticsearch/issues/60470
  - set:
      field: _tmp.grok_match
      value: "{{ _ingest._grok_match_index }}"

  # Sets various event fields based on pattern match index from grok processor above, N.B: trace_match required to get this index into metafields
  - script:
      lang: painless
      if: ctx?._tmp?.grok_match != null
      source: >-
        if (ctx._tmp.grok_match == "0") {
          ctx.event.kind = 'event';
          ctx.event.category = 'authentication';
          ctx.event.type = 'end';  
          ctx.event.outcome = 'success';
          ctx.event.action = 'browser-logout';  
        } else if (ctx._tmp.grok_match == "1") {
          ctx.event.kind = 'event';
          ctx.event.category = 'authentication';
          ctx.event.type = 'start';   
          ctx.event.outcome = 'success';
          ctx.event.action = 'browser-login';     
        } else if (ctx._tmp.grok_match == "2") { 
          ctx.event.kind = 'event';   
          ctx.event.category = 'authentication';
          ctx.event.type = 'denied';
          ctx.event.outcome = 'failure'; 
          ctx.event.action = 'browser-login-failure';
        } else if (ctx._tmp.grok_match == "3") {
          ctx.event.kind = 'event';
          ctx.event.category = 'authentication';
          ctx.event.type = 'end';  
          ctx.event.outcome = 'success';
          ctx.event.action = 'remote-console-session-stopped';   
        } else if (ctx._tmp.grok_match == "4") {
          ctx.event.kind = 'event';
          ctx.event.category = 'authentication';
          ctx.event.type = 'start';   
          ctx.event.outcome = 'success';
          ctx.event.action = 'remote-console-session-started';   
        } else if (ctx._tmp.grok_match == "5") {
          ctx.event.kind = 'event';
          ctx.event.category = 'configuration';
          ctx.event.type = 'change';
          ctx.event.outcome = 'success'; 
          ctx.event.action = 'remote-syslog-modified'; 
        } else if (ctx._tmp.grok_match == "6") {
          ctx.event.kind = 'event';
          ctx.event.category = 'authentication';
          ctx.event.type = 'end';  
          ctx.event.outcome = 'success'; 
          ctx.event.action = 'rest-logout';  
        } else if (ctx._tmp.grok_match == "7") {
          ctx.event.kind = 'event';
          ctx.event.category = 'authentication';
          ctx.event.type = 'start';  
          ctx.event.outcome = 'success'; 
          ctx.event.action = 'rest-login';  
        } else if (ctx._tmp.grok_match == "8") {
          ctx.event.kind = 'alert';
          ctx.event.category = 'intrusion_detection';
          ctx.event.type = 'denied';
          ctx.event.action = 'denial-of-service';
          ctx.event.reason = 'three-unauthorized-login-attempts';     
        } else if (ctx._tmp.grok_match == "9") {
          ctx.event.kind = 'event';
          ctx.event.type = 'info';
          ctx.event.outcome = 'success';
          ctx.event.action = 'ers-data-collection-sent';
        } else if (ctx._tmp.grok_match == "10") {
          ctx.event.kind = 'event';
          ctx.event.type = 'info';
          ctx.event.outcome = 'success';
          ctx.event.action = 'ers-active-health-report-sent';
        } else if (ctx._tmp.grok_match == "11") {
          ctx.event.kind = 'event';
          ctx.event.type = 'info';
          ctx.event.action = 'embedded-flash-restarted';
          ctx.event.outcome = 'success';
        } else if (ctx._tmp.grok_match == "12") {
          ctx.event.kind = 'event';
          ctx.event.type = 'info';
          ctx.event.action = 'server-reset';
          ctx.event.outcome = 'success';
        } else if (ctx._tmp.grok_match == "13") {
          ctx.event.kind = 'event';
          ctx.event.type = 'info';
          ctx.event.action = 'server-power-restored';
          ctx.event.outcome = 'success';
        } else if (ctx._tmp.grok_match == "14") {
          ctx.event.kind = 'event';
          ctx.event.category = 'configuration';
          ctx.event.type = 'info';
          ctx.event.action = 'syslog-configured-correctly';
          ctx.event.outcome = 'success';
        } else if (ctx._tmp.grok_match == "15") {
          ctx.event.outcome = 'unknown';
        }

  - date:
      field: "_tmp.timestamp"
      formats: 
        - "MMM d HH:mm:ss"
        - "MMM dd HH:mm:ss"
        - "MMM  d HH:mm:ss"
      timezone: "{{ event.timezone }}"
      if: "ctx._tmp?.timestamp != null && ctx._tmp?.timestamp != \"\" && ctx.event?.timezone != null && ctx.event?.timezone != \"\""

  - date:
      field: "_tmp.timestamp"
      formats: 
        - "MMM d HH:mm:ss"
        - "MMM dd HH:mm:ss"
        - "MMM  d HH:mm:ss"
      if: "ctx._tmp?.timestamp != null && ctx._tmp?.timestamp != \"\" && ctx.event?.timezone == null || ctx.event?.timezone == \"\""

  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
      if: ctx.source?.ip != null

  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
      if: ctx.source?.ip != null

  - remove:
      field: source.domain
      if: "ctx?.source?.domain == 'DNS name not found'"
      description: Set the field as domain if found, domain will be null if field is (DNS name not found).

  - remove:
      description: "Cleanup temporary and other garbage fields"
      field:
      - _tmp
      ignore_missing: true

  - remove:
      description: "Remove event.original unless tags indicate not to"
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_missing: true

on_failure:
- set:
    field: error.message
    value: "{{ _ingest.on_failure_message }}"